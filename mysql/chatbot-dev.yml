---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-b2c-chatbot-pvc
spec:
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: prod-efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-03a4802c295a7e378

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-b2c-chatbot-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: prod-efs-sc
  resources:
    requests:
      storage: 2Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  name: redis-b2c
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redis-b2c
      role: master
      tier: backend
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redis-b2c
        role: master
        tier: backend
    spec:
      containers:
      - image: redis:7.0.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: redis-b2c
        ports:
        - containerPort: 6379
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: efs-b2c-chatbot-pvc
          mountPath: /data
      volumes:
      - name: efs-b2c-chatbot-pvc
        persistentVolumeClaim:
          claimName: efs-b2c-chatbot-claim


---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: chatbot
    meta.helm.sh/release-namespace: default
  generation: 3
  labels:
    app.kubernetes.io/managed-by: Helm
  name: prod-chatbot-srv
  namespace: default
spec:
  minReadySeconds: 4
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prod-chatbot-srv
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 10%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "50000"
        prometheus.io/scrape: "true"
        vault.security.banzaicloud.io/vault-addr: http://vault:8200
        vault.security.banzaicloud.io/vault-namespace: vault-infra
        vault.security.banzaicloud.io/vault-path: kubernetes
        vault.security.banzaicloud.io/vault-role: stage-chatbot
        vault.security.banzaicloud.io/vault-serviceaccount: default
        vault.security.banzaicloud.io/vault-skip-verify: "true"
      creationTimestamp: null
      labels:
        app: prod-chatbot-srv
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: chatbot-configmap
        image: 845742683201.dkr.ecr.ap-south-1.amazonaws.com/chatbot-prod:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 500
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 4
        name: prod-chatbot-srv
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 2
          timeoutSeconds: 4
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 200Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: efs-b2c-chatbot-pvc
          mountPath: /botpress/data
      volumes:
      - name: efs-b2c-chatbot-pvc
        persistentVolumeClaim:
          claimName: efs-b2c-chatbot-claim
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 75
